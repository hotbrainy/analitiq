{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Analitiq","text":"<p>Analitiq is a Framework for managin your data using LLMs. Analitiq can be extended with your own services written in python.  These custom services can address your unique tasks for managing your data, and they can function as part of the overall analytical engine of Analitiq.</p> <p></p> <p>Analitiq currently supports the following LLM models - ChatGPT - Mistral - Bedrock (AWS)</p> <p>Analitiq currently integrates with the following vectorDBs - Weaviate - ChromaDB</p>"},{"location":"#what-analitiq-needs-to-work","title":"What Analitiq needs to work","text":"<p>Since Analitiq is a framework to help data people manage data using LLMs, it requires at the least: 1. Access to LLM 2. Access to Database</p> <p>As an extra bonus and to make things even smarter, it could also use: 3. Access to Vector Database with documentation.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Clone the repo</li> <li>Set up <code>profiles.yml</code> in root directory. The file <code>profiles.yml</code> has all of your sensitive info, such as your API keys and DB credentials, so treat it with respect. Under <code>uses</code> you can define which connections should be used for the current deployment.    Ideally, you would have different <code>profiles.yml</code> for your prod and dev instances. <pre><code>test:\n  connections:\n    databases:\n      - name: prod_dw\n        type: postgres\n        host: xxxxx\n        user: xxxx\n        password: 'xxxxx'\n        port: 5432\n        dbname: sample_db\n        dbschema: sample_schema\n        threads: 4\n        keepalives_idle: 240 # default 240 seconds\n        connect_timeout: 10 # default 10 seconds\n        # search_path: public # optional, not recommended\n    llms:\n      - name: prod_llm\n        type: openai\n        api_key: xxxxxx\n        temperature: 0.0\n        llm_model_name: gpt-3.5-turbo\n      - name: dev_llm\n        type: mistral\n        api_key: xxxxxx\n      - name: aws_llm\n        type: bedrock\n        credentials_profile_name: my_profile\n        provider: anthropic\n        llm_model_name: anthropic.claude-v2:1\n        temperature: 0.0\n    vector_dbs:\n      - name: prod_vdb\n        type: weaviate\n        host: example.com\n        api_key: xxxxx\n\n  usage:\n    databases: prod_dw\n    llms: aws_llm\n    vector_dbs: prod_vdb\n</code></pre></li> <li>Set up <code>project.yml</code> in root directory. The file <code>project.yml</code> has all of your project data, such as where the logs are stored. Most importantly, <code>project.yml</code> defines where your custom Services are located so Analitiq can pick them up and use them to manage your data. <pre><code>name: 'analitiq'\nversion: '0.1'\nprofile: 'test'\nconfig_version: 2\n\nconfig:\n  general:\n    chat_log_dir: \"chats\" # this is where we save our chat logs.\n    sql_dir: \"analysis\" # this is where the ETL SQLs are being saved and managed\n    services_dir: \"custom_services\"\n    session_uuid_file: 'session_uuid.txt' # Where session identifier is being recorded. When session is reset, it is like beginning of a new chat topic and new log file will be created.\n    target_path: \"target\"\n    message_lookback: 5 # when LLM has no clue about users request, or users request relates to some item in chat history, how far back (in number of messages) should the LLM look in the current session chat log\n  vectordb:\n    doc_chunk_size: 2000\n    doc_chunk_overlap: 200\n\nservices:\n  - name: ChartService\n    description: \"Use this service to generate script for APEX charts to visualize data\"\n    path: \"custom_services/chart/chart.py\"\n    class: \"Chart\"\n    method: \"run\"\n    inputs: \"dataframe as serialized json\"\n    outputs: \"javascript that is used by the frontend to visualize data\"\n</code></pre></li> <li>Run the example file <code>example.py</code> (located in the root directory.)</li> </ol>"},{"location":"#configuration-files","title":"Configuration files","text":"<p>There are 2 configuration files: 1. profiles.yaml - this file has all the secrets and connections needed to connect to LLMs, VectorDBs, Databases. Because you may have different production and development environments, profiles.yaml allows you to define multiple profiles (and multiple credentials). 2. project.yaml - this file has the parameters needed for your particular project, including what profile to use. You can define the profile in <code>profile</code> parameter.    Once you have your project deployed, you can specify which profile to be used by that particular project in <code>project.yaml</code>.</p> <p>Let's look at some examples. Let's say when I run Analitiq locally, I want to use OpenAI. And when I upload it to production server, I want to use Bedrock.</p> <p>I will set up my connections in profile.py <pre><code>prod:\n  connections:\n    databases:\n      - name: prod_db\n        type: postgres\n        host: xxxx\n        user: xxxx\n        password: xxxx\n        port: 5432\n        dbname: postgres\n        dbschema: sample_data\n        threads: 4\n        keepalives_idle: 240 # default 240 seconds\n        connect_timeout: 10 # default 10 seconds\n        # search_path: public # optional, not recommended\n\n    llms:\n      - name: aws_llm\n        type: bedrock\n        credentials_profile_name: bedrock\n        region_name: eu-central-1\n        provider: anthropic\n        llm_model_name: anthropic.claude-v2\n        temperature: 0.0\n        aws_access_key_id: xxxxx\n        aws_secret_access_key: xxxxx\n  usage:\n    databases: prod_db\n    llms: aws_llm\n\nlocal:\n  connections:\n    databases:\n      - name: local_db\n        type: postgres\n        host: xxxx\n        user: xxxx\n        password: xxxx\n        port: 5432\n        dbname: postgres\n        dbschema: sample_data\n        threads: 4\n        keepalives_idle: 240 # default 240 seconds\n        connect_timeout: 10 # default 10 seconds\n        # search_path: public # optional, not recommended\n\n    llms:\n      - name: openai_llm\n        type: openai\n        api_key: xxxx\n        temperature: 0.0\n        llm_model_name: gpt-3.5-turbo\n  usage:\n    databases: local_db\n    llms: openai_llm\n</code></pre></p> <p>on my local machine, I would have <code>project.py</code> file with the following configuration <pre><code>name: 'analitiq'\nversion: '0.1'\nprofile: 'local'\nconfig_version: 2\n</code></pre> and the production server will have <code>project.py</code> file with the following configuration <pre><code>name: 'analitiq'\nversion: '0.1'\nprofile: 'prod'\nconfig_version: 2\n</code></pre></p> <p>Now, I can move the project files between my prod environment and local and Analitiq will use different configuration to switch automagically.</p>"},{"location":"#ui","title":"UI","text":"<p>The app interface can be extended with a UI, such as streamlit app. </p>"},{"location":"vector_databases/weaviate/","title":"Analitiq Weaviate Integration Documentation","text":"<p>This documentation covers the <code>WeaviateHandler</code> module, part of the larger Analitiq framework. This module facilitates interactions with a Weaviate vector database, including loading document chunks and performing searches.</p>"},{"location":"vector_databases/weaviate/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Installation Requirements</li> <li>Quick Start</li> <li>Modules<ul> <li>Decorators</li> <li>Chunk Class</li> <li>WeaviateHandler Class</li> </ul> </li> <li>Usage Examples<ul> <li>Loading Files</li> <li>Searching for Data</li> </ul> </li> </ol>"},{"location":"vector_databases/weaviate/#overview","title":"Overview","text":"<p>The <code>WeaviateHandler</code> module provides a set of tools for managing and querying a Weaviate vector database. It allows users to load documents, split them into chunks, and perform keyword searches. This module is designed to integrate seamlessly with other parts of the Analitiq framework.</p>"},{"location":"vector_databases/weaviate/#installation-requirements","title":"Installation Requirements","text":"<p>Before using the <code>WeaviateHandler</code> module, ensure you have the following software and libraries installed:</p> <ul> <li>Python 3.6+</li> <li>Weaviate Python Client</li> <li>Pydantic</li> <li>Analitiq Framework</li> </ul>"},{"location":"vector_databases/weaviate/#quick-start","title":"Quick Start","text":"<p>Here's a simple example demonstrating the basic functionality of the <code>WeaviateHandler</code> module:</p> <pre><code>from analitiq.vectordb.weaviate import WeaviateHandler\n\nparams = {\n    \"project_name\": \"my_project\",\n    \"host\": \"https://XXXXXXX.weaviate.network\",\n    \"api_key\": \"XXXXXX\"\n}\n\nvdb = WeaviateHandler(params)\nFILE_PATH = './project/My_Project/sql'\nvdb.load(FILE_PATH, 'sql')\n</code></pre>"},{"location":"vector_databases/weaviate/#modules","title":"Modules","text":""},{"location":"vector_databases/weaviate/#decorators","title":"Decorators","text":""},{"location":"vector_databases/weaviate/#search_only","title":"<code>search_only</code>","text":"<p>This decorator wraps a function to ensure it only performs search operations.</p> <pre><code>def search_only(func):\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper\n</code></pre>"},{"location":"vector_databases/weaviate/#search_grouped","title":"<code>search_grouped</code>","text":"<p>This decorator wraps a function to group the search response by document and source.</p> <pre><code>def search_grouped(func):\n    def wrapper(*args, **kwargs):\n        response = func(*args, **kwargs)\n        self = args[0]\n        return self._group_by_document_and_source(response)\n    return wrapper\n</code></pre>"},{"location":"vector_databases/weaviate/#chunk-class","title":"Chunk Class","text":"<p>The <code>Chunk</code> class represents a chunk of text in a document.</p> <pre><code>class Chunk(BaseModel):\n    project_name: str = None\n    document_name: str = None\n    document_type: Optional[str] = None\n    content: str = None\n    source: str\n    document_num_char: int\n    chunk_num_char: int\n</code></pre>"},{"location":"vector_databases/weaviate/#weaviatehandler-class","title":"WeaviateHandler Class","text":"<p>The <code>WeaviateHandler</code> class handles interactions with a Weaviate cluster and manages a collection within the cluster.</p>"},{"location":"vector_databases/weaviate/#initialization","title":"Initialization","text":"<pre><code>def __init__(self, params):\n    super().__init__(params)\n    if not self.try_connect():\n        self.connected = False\n        self.collection = None\n    else:\n        multi_collection = self.client.collections.get(self.collection_name)\n        self.collection = multi_collection.with_tenant(self.collection_name)\n    self.chunk_processor = DocumentChunkLoader(self.collection_name)\n</code></pre>"},{"location":"vector_databases/weaviate/#methods","title":"Methods","text":"<ul> <li>connect: Connect to the Weaviate database.</li> <li>create_collection: Create a new collection in Weaviate.</li> <li>close: Close the Weaviate client connection.</li> <li>_chunk_load_file_or_directory: Load files from a directory or a single file, split them into chunks, and insert them into Weaviate.</li> <li>load: Load a file or directory into Weaviate.</li> <li>_group_by_document_and_source: Group a list of dictionaries by their 'document_name' and 'source'.</li> <li>kw_search: Perform a keyword search in the Weaviate database.</li> <li>delete_many_like: Delete multiple documents from the collection where the given property value is similar.</li> <li>get_many_like: Retrieve objects from the collection that have a property whose value matches the given pattern.</li> <li>delete_collection: Delete a collection and all its data.</li> </ul>"},{"location":"vector_databases/weaviate/#usage-examples","title":"Usage Examples","text":""},{"location":"vector_databases/weaviate/#loading-files","title":"Loading Files","text":""},{"location":"vector_databases/weaviate/#loading-all-sql-files-from-a-directory","title":"Loading all SQL files from a directory","text":"<pre><code>from analitiq.vectordb.weaviate import WeaviateHandler\n\nparams = {\n    \"project_name\": \"my_project\",\n    \"host\": \"https://XXXXXXX.weaviate.network\",\n    \"api_key\": \"XXXXXX\"\n}\n\nvdb = WeaviateHandler(params)\nFILE_PATH = './project/My_Project/sql'\nvdb.load(FILE_PATH, 'sql')\n</code></pre>"},{"location":"vector_databases/weaviate/#loading-a-single-file","title":"Loading a single file","text":"<pre><code>from analitiq.vectordb.weaviate import WeaviateHandler\n\nparams = {\n    \"project_name\": \"my_project\",\n    \"host\": \"https://XXXXXXX.weaviate.network\",\n    \"api_key\": \"XXXXXX\"\n}\n\nvdb = WeaviateHandler(params)\nFILE_PATH = './project/My_Project/my_file.sql'\nvdb.load(FILE_PATH)\n</code></pre>"},{"location":"vector_databases/weaviate/#searching-for-data","title":"Searching for Data","text":""},{"location":"vector_databases/weaviate/#keyword-search","title":"Keyword Search","text":"<p>The <code>kw_search</code> method performs a keyword search in the database.</p> <pre><code>search_results = vdb.kw_search(\"climate change\", limit=5)\n</code></pre> <p>Returned Data Format:</p> <pre><code>{\n    \"document_id_1\": {\n        \"content\": \"Document content related to climate change...\",\n        \"document_name\": \"Document 1\",\n        \"source\": \"Source A\"\n    },\n    \"document_id_2\": {\n        \"content\": \"Another document content about climate change...\",\n        \"document_name\": \"Document 2\",\n        \"source\": \"Source B\"\n    }\n}\n</code></pre>"},{"location":"vector_databases/weaviate/#grouped-search-results","title":"Grouped Search Results","text":"<p>The <code>kw_search_grouped</code> method groups the search results based on their document_name and source.</p> <pre><code>grouped_results = vdb.kw_search_grouped(\"sustainable energy\", limit=5)\n</code></pre> <p>Returned Data Format:</p> <pre><code>{\n    \"('Document 1', 'Source A')\": [\n        \"Document content related to sustainable energy...\",\n        \"Another piece of content from the same document and source...\"\n    ],\n    \"('Document 2', 'Source B')\": [\n        \"Document content on sustainable energy from a different source...\"\n    ]\n}\n</code></pre> <p>These functionalities provide an efficient and flexible way to search and analyze documents in the Weaviate database. Whether you need a straightforward list of search results or a grouped view based on specific attributes, the <code>WeaviateHandler</code> class caters to both requirements seamlessly.</p>"}]}